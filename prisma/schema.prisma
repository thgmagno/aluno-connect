generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Student {
  id            String          @id @default(cuid())
  name          String
  email         String          @unique
  password      String?
  birthdate     DateTime        @db.Date
  firstAccess   Boolean         @default(true)
  Request       Request[]
  Frequency     Frequency[]
  StudentParent StudentParent[]
  StudentClass  StudentClass[]

  @@map("student")
}

model Frequency {
  id        String   @id @default(cuid())
  date      DateTime @default(now()) @db.Date
  status    Status
  studentId String
  classId   String

  classID   Classroom @relation(fields: [classId], references: [id])
  studentID Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  Request   Request[]

  @@map("frequency")
}

model Request {
  id            String  @id @default(cuid())
  justification String
  imageURL      String?
  studentId     String
  frequencyId   String
  category      String  @default("Nenhuma")

  studentID   Student   @relation(fields: [studentId], references: [id])
  frequencyID Frequency @relation(fields: [frequencyId], references: [id])

  @@map("request")
}

model Instructor {
  id              String            @id @default(cuid())
  name            String
  email           String            @unique
  password        String?
  firstAccess     Boolean           @default(true)
  InstructorClass InstructorClass[]

  @@map("instructor")
}

model Parent {
  id            String          @id @default(cuid())
  name          String
  email         String          @unique
  password      String?
  firstAccess   Boolean         @default(true)
  StudentParent StudentParent[]

  @@map("parent")
}

model Administrator {
  id       String @id @default(cuid())
  name     String
  email    String @unique
  password String

  @@map("administrator")
}

model Classroom {
  id              String            @id @default(cuid())
  course_name     String            @unique
  StudentClass    StudentClass[]
  InstructorClass InstructorClass[]
  Frequency       Frequency[]

  @@map("classroom")
}

model StudentParent {
  id        Int    @id @default(autoincrement())
  studentId String
  parentId  String

  studentID Student @relation(fields: [studentId], references: [id])
  parentID  Parent  @relation(fields: [parentId], references: [id])

  @@map("student_parent")
}

model StudentClass {
  id        Int    @id @default(autoincrement())
  studentId String
  classId   String

  studentID Student   @relation(fields: [studentId], references: [id])
  classID   Classroom @relation(fields: [classId], references: [id])

  @@map("student_class")
}

model InstructorClass {
  id           Int    @id @default(autoincrement())
  instructorId String
  classId      String

  instructorID Instructor @relation(fields: [instructorId], references: [id])
  classID      Classroom  @relation(fields: [classId], references: [id])

  @@map("instructor_class")
}

enum Status {
  PENDING
  APPROVED
  REJECTED
  PRESENT
  ABSENT

  @@map("status_request")
}
