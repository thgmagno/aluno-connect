generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id               Int                @id @default(autoincrement())
  name             String
  email            String             @unique
  password         String?
  profile          UserProfile        @default(STUDENT)
  birthdate        DateTime?          @db.Date()
  Request          Request[]
  StudentFrequency StudentFrequency[]
  StudentParent    StudentParent[]
  Frequency        Frequency[]
}

enum UserProfile {
  STUDENT
  PARENT
  INSTRUCTOR
  ADMINISTRATOR
}

model Frequency {
  id                 Int                  @id @default(autoincrement())
  date               DateTime             @db.Date()
  status             FrequencyStatus      @default(ABSENT)
  student            User                 @relation(fields: [student_id], references: [id], onDelete: Cascade)
  student_id         Int
  classroom          Classroom            @relation(fields: [classroom_id], references: [id], onDelete: Cascade)
  classroom_id       Int
  classroom_name     String
  Request            Request[]
  StudentFrequency   StudentFrequency[]
  ClassroomFrequency ClassroomFrequency[]
}

enum FrequencyStatus {
  PRESENT
  ABSENT
  PENDING
  APPROVED
  REJECTED
}

model Classroom {
  id                  Int                   @id @default(autoincrement())
  course_name         String                @unique
  StudentClassroom    StudentClassroom[]
  InstructorClassroom InstructorClassroom[]
  ClassroomFrequency  ClassroomFrequency[]
  Frequency           Frequency[]
}

model Request {
  id            Int       @id @default(autoincrement())
  student       User      @relation(fields: [student_id], references: [id], onDelete: Cascade)
  student_id    Int
  student_name  String
  parent_id     Int?
  frequency     Frequency @relation(fields: [frequency_id], references: [id], onDelete: Cascade)
  frequency_id  Int
  course_name   String
  justification String
  imageUrl      String?
  category      String?
}

model StudentFrequency {
  id           Int       @id @default(autoincrement())
  student      User      @relation(fields: [student_id], references: [id], onDelete: Cascade)
  student_id   Int
  frequency    Frequency @relation(fields: [frequency_id], references: [id], onDelete: Cascade)
  frequency_id Int
}

model StudentParent {
  id          Int   @id @default(autoincrement())
  parent      User  @relation(fields: [parent_id], references: [id], onDelete: Cascade)
  parent_id   Int   @unique
  students_id Int[]
}

model StudentClassroom {
  id           Int       @id @default(autoincrement())
  students_id  Int[]
  classroom    Classroom @relation(fields: [classroom_id], references: [id], onDelete: Cascade)
  classroom_id Int       @unique
}

model InstructorClassroom {
  id             Int       @id @default(autoincrement())
  instructors_id Int[]
  classroom      Classroom @relation(fields: [classroom_id], references: [id], onDelete: Cascade)
  classroom_id   Int       @unique
}

model ClassroomFrequency {
  id           Int       @id @default(autoincrement())
  classroom    Classroom @relation(fields: [classroom_id], references: [id], onDelete: Cascade)
  classroom_id Int
  frequency    Frequency @relation(fields: [frequency_id], references: [id], onDelete: Cascade)
  frequency_id Int
}
